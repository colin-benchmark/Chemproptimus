{
    "name": "Xantus",
    "config": {
        "comms": {
            "address": 0x10,
            "port": 0x0A
        }
    },
    "components": {
        "device": {
            "description": "Returns information about the software running on the board",
            "attributes": {
                "version": {
                    "type": "uint8_t",
                    "rows": 3,
                    "description":"Major, minor and patch version number",
                    "default": [0, 1, 0],
                    "readonly": true
                },
                "manufacturer": {
                    "type": "uint8_t",
                    "rows": 9,
                    "description": "Will return benchmark",
                    /* manufacturer: benchmark */
                    "default": [0x62, 0x65, 0x6E, 0x63, 0x68, 0x6D, 0x61, 0x72, 0x6B],
                    "readonly": true
                },
                "serial_number": {
                    "type": "uint8_t",
                    "rows": 8,
                    "description":"The serial number of the device. Can only be written with the correct Codeword written to the EEPROM component",
                    "default": [0, 0, 0, 0, 0, 0, 0, 0],
                    "readonly": true
                },
                "build": {
                    "type": "uint32_t",
                    "description": "SHA of current commit at build",
                    "default": 0,
                    "readonly": true
                },
                "bootcounter": {
                    "type": "uint16_t",
                    "description": "Number of times this device has been booted",
                    "default": 0,
                    "readonly": true
                },
                "status": {
                    "type": "uint16_t",
                    "description": "Bit-code indication of device health",
                    "default": 0,
                    "readonly": true
                },
                "last_error": {
                    "type": "uint8_t",
                    "description": "The last error code generated by an operation made on the device. Cleared after reading.",
                    "default": 0,
                    "readonly": true
                },
                "log_level": {
                    "type": "uint8_t",
                    "description": "Enable verbose debugging of the platform. Primarily this will enable outputting messages via the secondary comms port. This may also mean enabling certain features not required for nominal operations. The level will define the verbosity of this output with 0 meaning NO DEBUG",
                    "default": 0,
                },
                "checksum": {
                    "type": "uint32_t",
                    "description": "On boot generate a checksum based on the firmware loaded to aid in identifying its version if other tests fail. Also provides a method of detecting firmware image corruption",
                    "default": 0,
                    "readonly": true
                }
            },
            "methods": {
                "print_verison": {
                    "description": "Print device information to debug port"
                },
                "reboot": {
                    "description": "Reboot the device"
                },
                "calculate_checksum": {
                    "description": "Update value in `device.checksum`"
                }
            }
        },
        "telemetry": {
            "description": "The telemetry component gives access to the various measurements taken pertaining to the operation of the device.",
            "attributes": {
                "temperature": {
                    "type": "float",
                    "description": "Temperatures of various device elements",
                    "rows": 8,
                    "readonly": true
                },
                "capacitor_voltage": {
                    "description": "The measured voltage across the buck-boost capacitor",
                    "type": "float",
                    "readonly": true
                },
                "shots": {
                    "type": "uint32_t",
                    "desription": "Number of shots taken by each head",
                    "rows": 4,
                    "readonly": true
                }
            },
            "methods": {}
        },
        "nvm": {
            "description": "The device's EEPROM is used to permanently store information across its entire operational life",
            "attributes": {
                "codework": {
                    "type": "uint32_t",
                    "description": "When performing actions such as resetting the EEPROM a codeword is required to prevent accidental activation",
                    "default": 0
                }
            },
            "methods": {
                "reset": {
                    "description": "Reset the EEPROM to a set of known working defaults. Requires the correct Codeword to be written in the EEPROM component"
                }
            }
        },
        "power": {
            "description": "The Buck Boost circuitry charges up the voltage across a large capacitor which will be released to the necessary firing heads when required",
            "attributes": {
                "ppu_status": {
                    "type": "bool",
                    "description": "Is the PPU currently enabled?",
                    "readonly": true,
                    "default": false
                },
                "ppu_frequency": {
                    "type": "uint16_t",
                    "description": "Frequency of PWM controlled Buck Boost (Hz)",
                    "default": 1000
                },
                "ppu_duty_cycle": {
                    "type": "uint8_t",
                    "description": "Duty cycle of PWM controlled Buck Boost (%)",
                    "default": 50
                },
                "buckboost_status": {
                    "type": "bool",
                    "description": "Is the Buck-Boost currently enabled?",
                    "readonly": true,
                    "default": false
                },
                "current_limit": {
                    "type": "uint8_t",
                    "description": "Sets the inrush settings which is used to control the firing power",
                    "default": 0
                },
            },
            "methods": {
                "set_ppu": {
                    "description": "Enable or disbale the PPU",
                    "parameters":{
                        "enabled": {
                            "type": "bool",
                            "description": "False - Disable PPU, True - Enable PPU"
                        },
                    }
                },
                "set_buckboost": {
                    "description": "Enable or disbale the Buck Boost",
                    "parameters":{
                        "enabled": {
                            "type": "bool",
                            "description": "False - Disable PPU, True - Enable PPU"
                        },
                    }
                },
            }
        },
        "firing": {
            "description": "The firing component controls the state-machines which control the thrusters firing mechanisms.",
            "attributes": {
                "inductor_charge_time": {
                    "type": "uint16_t",
                    "description": "Time in ms to release charge from capacitor into an inductor, where N represents the number of thruster heads (and therefore inductors)",
                    "rows": 4,
                    "default": [50, 50, 50, 50],
                    "write_callback": true,
                    "read_callback": true,
                },
                "firing_pattern": {
                    "type": "uint8_t",
                    "description": "The order in which individual thrusters should be fired when performing a firing cycle.",
                    "rows": 16,
                    "write_callback": true,
                    "read_callback": true,
                },
                "capacitor_charge_time": {
                    "type": "uint16_t",
                    "description": "Time in ms the firing capacitor should be charged for",
                    "default": 50,
                    "write_callback": true,
                    "read_callback": true,
                },
                "shots_remaining": {
                    "type": "uint16_t",
                    "description": "Number of shots remaining when in shot-firing mode",
                    "default": 0,
                    "readonly": true
                },
                "cycles_remaining": {
                    "type": "uint16_t",
                    "description": "Number of cycles remaining when in cycle-firing mode",
                    "default": 0,
                    "readonly": true
                },
                "target_power": {
                    "type": "uint16_t",
                    "description": "When in adaptive-mode attempt to consistently fire at this target power",
                    "default": 0,
                },
                "firing_mode": {
                    "type": "uint8_t",
                    "description": "0 - Adaptive mode: Attempt to hit a target power by automatically adjusting the firing time of each show. 1 - Fixed mode: Use the values provided by the Firing components timing attributes.",
                    "default": 0
                },
                "enabled": {
                    "type": "bool",
                    "description": "This is probably wrong and needs untangled",
                    "default": false
                },
                "safety_override": {
                    "type": "bool",
                    "description": "Allows for values to be written to the firing parameters which are outwith the recommended bounds",
                    "default": false
                },
                "total_isp": {
                    "type": "uint16_t",
                    "description": "Total impulse",
                    default: 0
                }
            },
            "methods": {
                "fire_shots": {
                    "description": "Fire a specific thruster for a number of shots",
                    "parameters":{
                        "thruster": {
                            "type": "int8_t",
                            "description": "Thruster to fire"
                        },
                        "shots": {
                            "type": "int16_t",
                            "description": "Number of shots to fire"
                        }
                    }
                },
                "fire_cycles": {
                    "description": "Cycle through the firing pattern defined by Firing Pattern for a number of cycles",
                    "parameters":{
                        "cycles": {
                            "type": "uint16_t",
                            "description": "Number of cycles to fire"
                        }
                    }
                }
            },
        },
    }
}